{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3d8c08f6-57ac-4431-993b-93efa34efce2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# Lesson 1: making Markov chains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0762fef1-b6c0-457d-9599-707e74c607d9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import marmote.core as mc\n",
    "import marmote.markovchain as mmc\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de7da25d-0f11-45f6-a7ad-c84c4bcb69a9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "A Markov Chain is composed of\n",
    "+ a **state space**\n",
    "+ a **transition structure** (probability matrix or infinitesimal generator)\n",
    "+ an **initial distribution** of the state\n",
    "\n",
    "In this first lesson, we show various ways of creating such objects. We will in particular highlight *transition structures* and the class `MarkovChain`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72f9328d-6fac-40a6-a2a5-7bd02e67a093",
   "metadata": {},
   "source": [
    "## First example: a discrete-time Markov chain with 3 states"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a72eb036-15f2-418c-9d80-7af07e924c4a",
   "metadata": {},
   "source": [
    "### State space"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae4e39c2-5cab-4b6a-81ee-26bf4017d086",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We first create a state space as vector of state indices.<br>\n",
    "The size `n` of this vector is needed in the following."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44643d0b-f20c-4e34-afa1-8a83c41d49a0",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "states = np.array( [0, 1, 2] )\n",
    "n = states.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf6d4275-b4c0-4f58-b041-cd82563a57d2",
   "metadata": {},
   "source": [
    "### Transition structure"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe60a5d0-f0cd-429f-b6a8-c0b608df21b5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Now create the transition structure and enter values.<br>\n",
    "Two objects are available for this: `SparseMatrix` and `FullMatrix`.<br>\n",
    "Let us start with a `FullMatrix`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e6ac350-a933-4cd6-9071-121cf1c89e11",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "P = mc.FullMatrix(n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "789588ea-fc69-4bbd-80af-f2590dd0ad76",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "`Marmote` has to know if this is a discrete-time or continuous-time transition structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56ca2eb8-635c-4ef2-8e9b-8429229cad44",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "P.set_type(mc.DISCRETE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b21a0d08-42b6-491f-887b-9c52f4f6f36c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Now fill the values in. Two method are available for this: `setEntry` and `addToEntry`.\n",
    "Both have parameters `(row,column,value)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "565d6d08-c03c-4233-b9e9-8cf40dfe0960",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "P.setEntry(0,0,0.25)\n",
    "P.setEntry(0,1,0.5)\n",
    "P.setEntry(0,2,0.25)\n",
    "P.setEntry(1,0,0.4)\n",
    "P.setEntry(1,1,0.2)\n",
    "P.setEntry(1,2,0.4)\n",
    "P.setEntry(2,0,0.4)\n",
    "P.setEntry(2,1,0.3)\n",
    "P.setEntry(2,2,0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f2d32d4-3803-4a03-a5d6-bd130c30bffc",
   "metadata": {},
   "source": [
    "We inspect the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ada10311-eaf7-4823-9cb0-275bfb4b747f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(P)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4763fa94-5020-4f44-b3da-a3cf1059cdce",
   "metadata": {},
   "source": [
    "### Initial distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7182c313-bd34-4a44-83a9-7d0e3c11754f",
   "metadata": {},
   "source": [
    "Distributions exist as objects in `Marmote`. The most common one is `DiscreteDistribution` which represents general distributions on discrete state spaces. \n",
    "It can be constructed from two arrays:\n",
    "* the state space array (already defined above)\n",
    "* the array of probabilities of these states"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee8c6dd6-3ba4-46f3-b7a1-7b7d394ba5df",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "initial_prob = np.array( [0.2, 0.2, 0.6] )\n",
    "initial = mc.DiscreteDistribution(states, initial_prob)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "638b54b7-26da-4874-bebf-f6228d220a46",
   "metadata": {},
   "source": [
    "Inspecting the object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36219d1b-059c-4395-aec7-8bb74f3034d4",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print( initial )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5dfe0fd-86aa-4672-83ed-e08a0b2262bb",
   "metadata": {},
   "source": [
    "We will show more about `Distribution` objects in Lesson3."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c5bb884-4092-4563-aa48-bf6c04a01de5",
   "metadata": {},
   "source": [
    "### The Markov chain"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e5e496a-6385-476d-8687-4e46f6c532c7",
   "metadata": {},
   "source": [
    "The object of type `MarkovChain` is created directly from the generator (probability transition matrix).<br>\n",
    "Then other (optional) features are specified:\n",
    "\n",
    "* the initial distribution\n",
    "* the name of the Markov chain model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53dd8f85-f421-4e49-b6f1-bd0e738b2244",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "c1 = mmc.MarkovChain( P )\n",
    "c1.set_init_distribution(initial)\n",
    "c1.set_model_name( \"Demo_Discrete\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c24b810e-c464-4344-991b-4299dbb8891d",
   "metadata": {},
   "source": [
    "Printing the Markov chain. Several formats are available. This one is the default `Marmote` format (it is adapted to sparse matrices).\n",
    "It lists:\n",
    "\n",
    "* the generator (probability transition matrix or infinitesimal generator)\n",
    "* the initial distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99d9086d-3b71-4509-84a7-8515c3f360ca",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(c1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46c92286-53db-4ef0-a25d-420281018cd7",
   "metadata": {},
   "source": [
    "The characteristics of the object can be inspected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5646ffc7-4e2b-416a-93d6-d03a861c196e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print( c1.type(), \" = \", mc.DISCRETE )             # The type of the chain (DISCRETE or CONTINUOUS) as a numerical representation\n",
    "print( c1.state_space_size() )\n",
    "print( c1.model_name() )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b1f7a62-52b5-416d-bccf-f35b791e3ec9",
   "metadata": {},
   "source": [
    "### Input/Output of Markov Chains and transition structures"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1f0513c-e46e-4939-b884-31d441185f37",
   "metadata": {},
   "source": [
    "`Marmote` support the export of these objects in a variety of formats."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f87c3f7-bf2f-4d4d-9467-a6248cb3fd26",
   "metadata": {},
   "source": [
    "Few languages have a format for Markov chains, but many have one for matrices.\n",
    "\n",
    "For instance: with the Matlab format for sparse matrices, the numpy format, the R format and the Maple format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53075168-7ae1-4449-b64e-cbc16f72eaf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "print( c1.generator().toString( mc.FORMAT_MATLAB_SPARSE ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa77c516-526d-4495-a7a7-ac386e419545",
   "metadata": {},
   "outputs": [],
   "source": [
    "print( c1.generator().toString( mc.FORMAT_NUMPY ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6609d397-58e5-4dd9-840f-d95827d4421b",
   "metadata": {},
   "outputs": [],
   "source": [
    "print( c1.generator().toString( mc.FORMAT_R ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "277cdef5-89f7-4784-a07e-0ca69ea7b47e",
   "metadata": {},
   "outputs": [],
   "source": [
    "print( c1.generator().toString( mc.FORMAT_MAPLE ) )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08cf5824-7ee7-4467-9c57-af16a8de564e",
   "metadata": {},
   "source": [
    "## Second example with a continuous-time Markov chain"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa1cb80b-2b7e-4283-8312-3e24526baeb2",
   "metadata": {},
   "source": [
    "Creating a continuous-time chain, this time with a `SparseMatrix` as transition stucture support."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "377b46cd-6e81-40ca-99b3-2ec729d4e960",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q = mc.SparseMatrix(6)\n",
    "Q.set_type(mc.CONTINUOUS)\n",
    "Q.setEntry(0,1,1.0)\n",
    "Q.setEntry(0,0,-1.0)\n",
    "for i in range(1,6):\n",
    "    if i > 0:\n",
    "        Q.setEntry(i,0,1.0)\n",
    "        Q.addToEntry(i,i,-1.0)\n",
    "    if i < 5:\n",
    "        Q.setEntry(i,i+1,1.0)\n",
    "        Q.addToEntry(i,i,-1.0)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "421d165b-4fbc-4142-b6ec-22d812c78888",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Q)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cad1e225-6ec3-473a-8214-fc4139cfd7b1",
   "metadata": {},
   "source": [
    "Creation of the Markov chain object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "992b694e-f101-4f91-b828-c81424bd4b36",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2 = mmc.MarkovChain( Q )\n",
    "c2.set_init_distribution(initial)\n",
    "c2.set_model_name( \"Demo_Continuous\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc33aa8a-5ee9-405a-8ae9-47e61889119e",
   "metadata": {},
   "source": [
    "Inspection of its features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3be2e2db-dfba-4e32-b085-576bca41a6e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "print( c2.type(), \" = \", mc.CONTINUOUS )             # The type of the chain (DISCRETE or CONTINUOUS) as a numerical representation\n",
    "print( c2.state_space_size() )\n",
    "print( c2.model_name() )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdc9318d-3bfe-4c14-bb7e-fca629323324",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2.generator().className()\n",
    "Q2 = c2.generator()\n",
    "print( Q2.className() )\n",
    "print( Q2.toString() )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "974d6116-839b-4ff1-bb5a-568d079532a9",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Transformation of Markov chains"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e42e648-c81d-435b-8f38-e9e3685d7110",
   "metadata": {},
   "source": [
    "There are two well-known ways to transform continuous-time chains into discrete-time ones: **uniformization** and **embedding**.\n",
    "Both are implemented in Marmote."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31b88e59-58ae-44af-92c5-e74772b0ad32",
   "metadata": {},
   "source": [
    "### Uniformization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67a31531-dfd3-4541-9ab6-0ab10ff352c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2uni = c2.Uniformize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc8c653d-e416-48ff-9433-3aa9dc4d6d49",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(c2uni)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8db9a12-5eb6-4da3-a9b9-d632fefc0884",
   "metadata": {},
   "source": [
    "### About the uniformization factor."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d0dcdf7-6fa0-41b3-a75f-06f719f81079",
   "metadata": {},
   "source": [
    "The `MarkovChain` method `Uniformize` has no parameter: the uniformization factor is automatically chosen, as small as possible."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c2e7e9-8c5c-4737-9136-9ea1918eb136",
   "metadata": {},
   "source": [
    "In some cases, a finer control is needed. This can be done via the `TransitionStructure` objects."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8fe6397-a7ed-4c70-99c4-1aaa22d8a36e",
   "metadata": {},
   "source": [
    "First inspect the uniformization rate chosen:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31439022-3562-4f37-837f-17df36ce1d84",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2uni.generator().uniformization_rate()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ac5522-a267-4950-bb36-bbf32415c7b7",
   "metadata": {},
   "source": [
    "Redo uniformization with a larger rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93f6c968-a88e-425b-891f-0fc663e1c932",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2uni2 = mmc.MarkovChain( c2.generator().Uniformize(4.0) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ead8c9c-9b6b-46cc-8479-62a35352977e",
   "metadata": {},
   "outputs": [],
   "source": [
    "mc.setInoutFormatPolicy(mc.FORMAT_NUMPY)\n",
    "print(c2uni2.generator().toString())\n",
    "print( \"Unif rate = \", c2uni2.generator().uniformization_rate() )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2da0648a-4bea-44b2-9e76-5736eef8286d",
   "metadata": {},
   "source": [
    "### Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fc5758e-3961-425c-a10f-62b7c8daa739",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2embed = c2.Embed()\n",
    "print(c2embed.generator().toString())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4c06322-0f5a-4ffe-9796-7bf549964382",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
