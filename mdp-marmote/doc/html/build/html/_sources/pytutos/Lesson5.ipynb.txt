{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a652608d-bd1c-49d7-b882-4263c8e1610a",
   "metadata": {},
   "source": [
    "# Lesson 5: Predefined Markov Chains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6986eb41-6cd3-41de-9771-b175faa145f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import marmote.core as marmotecore\n",
    "import marmote.markovchain as mmc\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7001f61-3037-4dfc-aa9f-95e5d8241b5c",
   "metadata": {},
   "source": [
    "Some of the well-known Markov models are implemented in `Marmote` as objects heritating from `MarkovChain`. Their current list is:\n",
    "\n",
    "* `TwoStateDiscrete`\n",
    "* `TwoStateContinuous`\n",
    "* `Homogeneous1DRandomWalk`\n",
    "* `Homogeneous1DBirthDeath`\n",
    "  * `PoissonProcess`\n",
    "* `HomogeneousMultiDRandomWalk`\n",
    "* `HomogeneousMultiDBirthDeath`\n",
    "* `MMPP` "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ee3a772-2066-4c80-9cf8-cc7c9847ebea",
   "metadata": {},
   "source": [
    "## The continuous-time birth-death process"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46cfb165-3372-4553-b089-f37e785b3674",
   "metadata": {},
   "source": [
    "### Infinite-state birth-death process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34a944f0-112f-4667-9845-b43a4b973061",
   "metadata": {},
   "outputs": [],
   "source": [
    "mc = mmc.Homogeneous1DBirthDeath( 0.5, 1.0 )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20280a94-0ef4-42c3-bbd4-970c634b3b37",
   "metadata": {},
   "source": [
    "Although it has theoretically an infinite state space, this chain can be simulated.\n",
    "\n",
    "Simulating the chain with options:\n",
    "\n",
    "* 10.0 units of time\n",
    "* no stats collected\n",
    "* no trajectory kept in memory\n",
    "* trajectory printed along the way\n",
    "* increments in times displayed as well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69bfc7ed-2519-4c39-b396-c0dbba15ba50",
   "metadata": {},
   "outputs": [],
   "source": [
    "simres = mc.SimulateChain( 10.0, stats=False, traj=False, _print=True, withIncrements=True )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97085101-6d27-48a6-bd6b-a1a8688368a4",
   "metadata": {},
   "source": [
    "Computing the stationary distribution. It is well-known that this distribution is geometric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e71a00ac-1296-4039-95c5-6ddbb92c523c",
   "metadata": {},
   "outputs": [],
   "source": [
    "stadis = mc.StationaryDistribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "331effbc-b178-44e3-85ca-fc5979ab23e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(stadis)\n",
    "print(stadis.Mean())\n",
    "print(stadis.getProba(0))\n",
    "print(stadis.getProba(1))\n",
    "print(stadis.Ccdf(4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce0ba46a-d89a-4236-ae21-b15c9dfa43c0",
   "metadata": {},
   "source": [
    "Embedding and Uniformizing.\n",
    "\n",
    "Uniformizing results in another well-known Markov chain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10cc93ac-9746-43c9-95cb-174fb1907e2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "umc = mc.Uniformize()\n",
    "print(umc.className())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54ac449c-d522-43ad-9048-ae0b26e6e7e5",
   "metadata": {},
   "source": [
    "However embedding does not result in a standard Markov chain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2cb1293-3a6a-49d1-abef-0ae5f74edff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mc.Embed()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41a7aad0-3d2d-41c4-92b8-4f47c7b6c771",
   "metadata": {},
   "source": [
    "### Finite-space birth-death proces"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2147da2e-59c6-45ec-87bf-4f5d9f6e3e37",
   "metadata": {},
   "source": [
    "A birth-death process with 11 states"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7c70e0a-a9f7-479d-9efe-0a360a752509",
   "metadata": {},
   "outputs": [],
   "source": [
    "mcf = mmc.Homogeneous1DBirthDeath( 11, 0.4, 0.8 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e41c8d30-6667-4236-af52-11b8ea86458e",
   "metadata": {},
   "outputs": [],
   "source": [
    "stadisf = mcf.StationaryDistribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67853fce-1c3a-4cdb-98fe-8c382666ce19",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(stadisf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7caff48-bdee-47ae-905d-77a0ee629990",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(stadisf.Mean())\n",
    "print(stadisf.getProba(0))\n",
    "print(stadisf.getProba(1))\n",
    "print(stadisf.Ccdf(4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f506f910-47a1-4da4-9b91-3af78714d24b",
   "metadata": {},
   "source": [
    "Investigating hitting times.\n",
    "\n",
    "First set up the hitting set. Here, states 3 and 7 are in the set: \\[ - - - X - - - X - - - \\]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "618751bc-9b9b-4dbb-8a4e-3771fd00522f",
   "metadata": {},
   "outputs": [],
   "source": [
    "hitSet = np.zeros( [11], dtype=bool)\n",
    "hitSet[3] = True\n",
    "hitSet[7] = True\n",
    "print(hitSet)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51a6f0af-f06d-44e3-bc79-a248deec3515",
   "metadata": {},
   "source": [
    "Average hitting times are computed (numerically in this case)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fa369da-28c1-4725-8b9a-b458f25dee68",
   "metadata": {},
   "outputs": [],
   "source": [
    "avg = mcf.AverageHittingTime( hitSet )\n",
    "print(avg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a554659-bb32-4971-bf9b-42c69924c8fd",
   "metadata": {},
   "source": [
    "Also available, joint expected hitting time and hitting state: E( tau * ind(X(tau)=s) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d10d81f-f833-4729-b442-c541389e6e74",
   "metadata": {},
   "outputs": [],
   "source": [
    "avgcon = mcf.AverageHittingTime_Conditional( hitSet )\n",
    "print( avgcon[0:10,2:8] )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa8df345-8cd3-421f-b886-667773463af2",
   "metadata": {},
   "source": [
    "Also available: simulation of hitting times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc712ebe-3bb8-4766-ab5a-fb8f44e032f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "simres = mcf.SimulateHittingTime( 0, hitSet, 20, 10000 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "feaf8431-0feb-40f4-8126-bbc618dca0b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "simres.Diagnose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "222c671a-1f71-43aa-809d-28725e915589",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(simres.CT_dates())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bd03d99-ddb1-4a2f-b5a6-8694e0cddabd",
   "metadata": {},
   "source": [
    "### Multidimensional birth-death"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76215857-b689-49c6-a835-9c2795116686",
   "metadata": {},
   "source": [
    "Consider a 3-d birth-death process on a 4 x 4 x 4 box.\n",
    "\n",
    "The constructor to `HomogeneousMultiDBirthDeath` has arguments: sizes, birth rates, death rates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df9dc48d-92ff-4b42-82d7-4ac064878031",
   "metadata": {},
   "outputs": [],
   "source": [
    "mdbd = mmc.HomogeneousMultiDBirthDeath( [ 4, 4, 4 ], [ 1.0, 1.0, 1.0], [ 0.8, 0.8, 0.2 ] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e1af7c0-9409-4126-aba1-7882bdfa154d",
   "metadata": {},
   "outputs": [],
   "source": [
    "simres = mdbd.SimulateChain( 10.0, stats=True, traj=False, withIncrements=True, _print=True )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213986ab-7ed3-486d-9670-29ed3e5b4685",
   "metadata": {},
   "source": [
    "Statistics can be performed on this trajectory also"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbff9da0-9bc1-4afd-a49b-69fdca4fecc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "sd = simres.Distribution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66830260-ade0-4d24-bba9-848622a63283",
   "metadata": {},
   "source": [
    "## Arrival processes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e220dae-1ca8-4e5e-977d-65bb8290215c",
   "metadata": {},
   "source": [
    "There are two pure arrival processes in `Marmote`: `PoissonProcess` and `MMPP`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d2ecdce-02fd-4556-92a5-05fa469f7016",
   "metadata": {},
   "outputs": [],
   "source": [
    "poi = mmc.PoissonProcess( 1.0 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3c4339d-2d7b-4bf3-98dc-7dffb10a1eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "simres = poi.SimulateChain( 10.0, False, True, True )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "861be9a1-feab-43df-a4f8-bfd52c3f3311",
   "metadata": {},
   "source": [
    "Creating an MMPP with modulating chain the 8-state birth-death of this lesson. Arrival rates are 0 except in states 1 and 7."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "481cab27-0053-4ad5-9a57-248db93a9a26",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmpp = mmc.MMPP( mcf.generator(), [ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 ] )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f052a3d-50db-4e95-a36a-a17dd14070ec",
   "metadata": {},
   "source": [
    "Simulation stating from 0 arrivals and state 0 of the environment. \n",
    "\n",
    "Coding of 'state' trajectory (experimental) is 2*nb of arrivals + current state of the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "645dde7c-6631-4b45-9c4c-24607298f678",
   "metadata": {},
   "outputs": [],
   "source": [
    "simres = mmpp.SimulateChain( 10.0, marmotecore.DiracDistribution(0.0), marmotecore.DiracDistribution(0.0), False, True, True )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
