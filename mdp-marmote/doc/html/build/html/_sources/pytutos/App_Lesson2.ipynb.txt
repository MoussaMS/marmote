{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ffb6eb4",
   "metadata": {},
   "source": [
    "# Application Lesson 2: Application to the control of a tandem  multi server system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84479bba",
   "metadata": {},
   "outputs": [],
   "source": [
    "import marmote.core as mco\n",
    "import marmote.markovchain as mch\n",
    "import marmote.mdp as md\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "219d3d3a",
   "metadata": {},
   "source": [
    "## The model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "882be200",
   "metadata": {},
   "source": [
    "We consider the tandem multi server queue model (below) (credit of the picture  [Tournaire 2021]) presented also in [Ohno and  Ichiki, 1987], or [Tournaire 2023]."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b16325ee",
   "metadata": {},
   "source": [
    "<img src=\"./tandemQueue.png\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "233989ca",
   "metadata": {},
   "source": [
    "**Parameters**\n",
    "\n",
    "Size of the systems: B1 and B2 with B1=B2=B\n",
    "\n",
    "Number of servers: K1 and K2 with K1=K2=K\n",
    "\n",
    "Statistics:  \n",
    "arrival  Poisson with rate lambda  \n",
    "service homogeneous with rate mu1 and mu2  \n",
    "\n",
    "Costs:  \n",
    "Instantaneous costs:  \n",
    "activation cost: *Ca*, deactivation cost: *Cd*, reject cost: *Cr*.   \n",
    "Rates costs (also called accumulated cost):    \n",
    "cost per time unit of using a VM: *Cs*, cost per time unit of holding a request in the system *Ch*.\n",
    "\n",
    "**Numerical values**\n",
    "\n",
    "B=10  \n",
    "K=5  \n",
    "lam=5  \n",
    "mu1=1  \n",
    "mu2=1   \n",
    "Ca=1  \n",
    "Cd=1  \n",
    "Cr=10  \n",
    "Cs=2  \n",
    "Ch=2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97bd1383",
   "metadata": {},
   "source": [
    "Build the model with a python dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c49528a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=dict()\n",
    "model['B1']=3 #10\n",
    "model['B2']=3 #10\n",
    "model['K1']=2 #5\n",
    "model['K2']=2 #5\n",
    "model['lam']=5.0\n",
    "model['mu1']=1.0\n",
    "model['mu2']=1.0\n",
    "model['Ca']=1  \n",
    "model['Cd']=1 \n",
    "model['Cr']=10 \n",
    "model['Cs']=2 \n",
    "model['Ch']=2\n",
    "model['beta']=1\n",
    "\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3a8005e",
   "metadata": {},
   "source": [
    "## Build a discrete time discounted MDP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e0618f6",
   "metadata": {},
   "source": [
    "### Build the states"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03e93f46-c183-4a87-9fdc-7102457235f9",
   "metadata": {},
   "source": [
    "The state is *(m1,k1,m2,k2)* with m from 0 to B-1 and  k from 0 to K-1. \n",
    "An action is *(k1,k2)* with k from 0 to K-1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "316b4ef5",
   "metadata": {},
   "outputs": [],
   "source": [
    "dims=np.array([model['B1'],model['K1'],model['B2'],model['K2']])\n",
    "print(dims) \n",
    "states= mco.MarmoteBox(dims)\n",
    "#\n",
    "actions=mco.MarmoteBox([model['K1'],model['K2']])\n",
    "\n",
    "print(\"Number of states\",states.Cardinal())\n",
    "print(states)\n",
    "print(\"Number of actions\",actions.Cardinal())\n",
    "print(\"actions\",actions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96200430",
   "metadata": {},
   "source": [
    "### Build matrices"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8adc60e3",
   "metadata": {},
   "source": [
    "#### Transitions matrices"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ab696ba-10d5-4feb-8a75-7fade9bf6746",
   "metadata": {},
   "source": [
    "We begin by defining a function which computes the transition matrix associated with an action such that the action index is: index_action.\n",
    "\n",
    "In a state, there is three types of event: arrival in the system, departure of the system, departure of the system 1 and arrival in system 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db211472",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fill_in_matrix(index_action,modele,ssp,asp):\n",
    "    # retrieve the action asscoiated with index\n",
    "    action_buf = asp.DecodeState(index_action)\n",
    "    #*#print(\"index action\",index_action,\"action\",action_buf)\n",
    "    #define the states\n",
    "    etat=np.array([0,0,0,0])\n",
    "    afteraction=np.array([0,0,0,0])\n",
    "    jump=np.array([0,0,0,0])\n",
    "    # define transition matrix\n",
    "    P=mco.SparseMatrix(ssp.Cardinal()) \n",
    "    #browsing state space\n",
    "    ssp.FirstState(etat)\n",
    "    for k in range(ssp.Cardinal()):\n",
    "        # compute the index of the state\n",
    "        indexL=ssp.Index(etat)\n",
    "        # compute the state after the action\n",
    "        afteraction[0]=etat[0]\n",
    "        afteraction[1]=action_buf[0]\n",
    "        afteraction[2]=etat[2]\n",
    "        afteraction[3]=action_buf[1]\n",
    "        #*# print(\"####index State=\",k,\"State\",etat,\"State after action\",afteraction)\n",
    "        # then detail all the possible transitions\n",
    "        ## Arrival (increases the number of customer in first coordinate with rate lambda)\n",
    "        if (afteraction[0]<modele['B1']-1) :\n",
    "            jump[0]=afteraction[0]+1\n",
    "            jump[1]=afteraction[1]\n",
    "            jump[2]=afteraction[2]\n",
    "            jump[3]=afteraction[3]\n",
    "        else: \n",
    "            jump[0]=afteraction[0]\n",
    "            jump[1]=afteraction[1]\n",
    "            jump[2]=afteraction[2]\n",
    "            jump[3]=afteraction[3]\n",
    "        #compute the index of the jump\n",
    "        indexC=ssp.Index(jump)\n",
    "        #fill in the entry\n",
    "        #*# print(\"*Event: Arrival. Index=\",indexC,\"Jump State=\",jump,\"rate=\",modele['lam'])\n",
    "        P.setEntry(indexL,indexC,modele['lam'])\n",
    "        #\n",
    "        ## departure of the first system entry in the second one\n",
    "        if (afteraction[2]<modele['B2']-1) :\n",
    "            jump[0]=max(0,afteraction[0]-1)\n",
    "            jump[1]=afteraction[1]\n",
    "            jump[2]=afteraction[2]+1\n",
    "            jump[3]=afteraction[3]\n",
    "        else: \n",
    "            jump[0]=max(0,afteraction[0]-1)\n",
    "            jump[1]=afteraction[1]\n",
    "            jump[2]=afteraction[2]\n",
    "            jump[3]=afteraction[3]\n",
    "        #index of the jump\n",
    "        indexC=ssp.Index(jump)\n",
    "        # rate of the transition\n",
    "        rate=min(afteraction[1],afteraction[0])*modele['mu1']\n",
    "        #fill in the entry\n",
    "        #*# print(\"*Event: Departure s1 entry s2. Index=\",indexC,\"Jump State=\",jump,\"rate=\",rate)\n",
    "        P.setEntry(indexL,indexC,rate)\n",
    "        #\n",
    "        ##departure of the second  system\n",
    "        jump[0]=afteraction[0]\n",
    "        jump[1]=afteraction[1]\n",
    "        jump[2]=max(0,afteraction[2]-1)\n",
    "        jump[3]=afteraction[3]\n",
    "        #compute the index of the jump\n",
    "        indexC=ssp.Index(jump)\n",
    "        # compute the rate\n",
    "        rate=min(afteraction[2],afteraction[3])*modele['mu2']\n",
    "        #fill in the entry\n",
    "        #*# print(\"*Event: Departure s2. Index=\",indexC,\"Jump State=\",jump,\"rate=\",rate)\n",
    "        P.setEntry(indexL,indexC,rate)\n",
    "        #change state\n",
    "        ssp.NextState(etat)\n",
    "    return P\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4969371b",
   "metadata": {},
   "source": [
    "#### Cost Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3294845e",
   "metadata": {},
   "source": [
    "We define now a function to fill in the cost matrix. \n",
    "\n",
    "Instantaneous Costs are:   \n",
    "Costs of activations = *max(action1-k1,0) \\* Ca + max(action2-k2,0) \\* Ca*  \n",
    "Costs of deactivations = *max(K1-action1,0) \\* Cd + max(K2-action2,0) \\* Cd*  \n",
    "rejection cost= *Cr \\* lambda/Lambda(s,a)* in states where *m1=B* added by  *Cr \\* action1 mu/Lambda(s,a)* in states where *m2=B*.  \n",
    "*Lambda(s,a)* is the total rate. It is equal to *lambda + action1 \\* mu + action2 \\* mu* .\n",
    "\n",
    "Accumulated Costs are:  \n",
    "(number of customers in the system)Ch = *(m1+m2)\\*Ch*   \n",
    "(number of activated VM) = *(action1+action2)\\*Cs*  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae92b932",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fill_in_cost(modele,ssp,asp):\n",
    "    R= mco.FullMatrix(ssp.Cardinal(),asp.Cardinal())\n",
    "    #define the states\n",
    "    etat=np.array([0,0,0,0])\n",
    "    #define the actions\n",
    "    acb=asp.StateBuffer()\n",
    "    ssp.FirstState(etat)\n",
    "    for k in range(ssp.Cardinal()):\n",
    "        # compute the index of the state\n",
    "        indexL=ssp.Index(etat)\n",
    "        #*#print(\"##State\",etat)\n",
    "        asp.FirstState(acb)\n",
    "        for j in range(asp.Cardinal()):\n",
    "            #*#print(\"---Action\",acb,end='  ')\n",
    "            action1=acb[0]\n",
    "            action2=acb[1]\n",
    "            totalrate=modele['lam']+action1*modele['mu1']+ action2*modele['mu2']\n",
    "            activationcosts=modele['Ca']*(max(0,action1-etat[1])+max(0,action2-etat[3])) \n",
    "            deactivationcosts=modele['Cd']*(max(0,etat[1]-action1)+max(0,action2-etat[3]))\n",
    "            rejectioncosts=0.0\n",
    "            if ((modele['B1']-1)==etat[0]):\n",
    "                rejectioncosts+=(modele['lam']*modele['Cr']) / totalrate\n",
    "            if ((modele['B2']-1)==etat[2]):\n",
    "                rejectioncosts+=( min(etat[0],action1)*modele['mu1']*modele['Cr']) / totalrate\n",
    "            instantaneouscosts=activationcosts+deactivationcosts+rejectioncosts\n",
    "            accumulatedcosts=(etat[0]+etat[2])*modele['Ch'] + (action1 +action2)*modele['Cs']\n",
    "            accumulatedcosts/=(totalrate+model['beta'])\n",
    "            #*#print(\"Instantaneous=\",instantaneouscosts,\" Rejection=\",rejectioncosts,end= ' ')\n",
    "            #*#print(\"Accumulatedcosts=\",accumulatedcosts)\n",
    "            R.setEntry(indexL,j,accumulatedcosts+instantaneouscosts)\n",
    "            asp.NextState(acb)\n",
    "        ssp.NextState(etat)\n",
    "    return R;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86a75df8",
   "metadata": {},
   "source": [
    "### Build the continuous time MDP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "801af4ef-cf96-4c9f-bba7-e199981872a8",
   "metadata": {},
   "source": [
    "Build all the transition matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f63f0022",
   "metadata": {},
   "outputs": [],
   "source": [
    "trans=list()\n",
    "\n",
    "action_buf = actions.StateBuffer()\n",
    "actions.FirstState(action_buf)\n",
    "for k in range(actions.Cardinal()):\n",
    "    trans.append(fill_in_matrix(k,model,states,actions))\n",
    "    print(\"---Matrix kth=\",k, \"filled in\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ba6de1c-1165-457e-a2fb-8ad052b5c5e5",
   "metadata": {},
   "source": [
    "Fill in the costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "864a3520-3e0c-466c-b755-60f000ca8c48",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Matrice of Costs\")\n",
    "Costs=fill_in_cost(model,states,actions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9b62dd7-0dd9-48d6-9fe4-3212222216b0",
   "metadata": {},
   "source": [
    "Build the MDP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14c78774-1264-4baf-b1d0-5c3f8ab8e551",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Begining of Building MDP\")\n",
    "ctmdp=md.ContinuousTimeDiscountedMDP(\"min\",states,actions,trans,Costs,model['beta'])\n",
    "print(ctmdp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6218a4eb",
   "metadata": {},
   "source": [
    "Uniformization of the MDP. After uniformization the MDP is a discrete time discounted MDP."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a72f61be-475e-42e1-82da-5a88a4cb35f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctmdp.UniformizeMDP()\n",
    "print(\"Rate of Uniformization\",ctmdp.getMaximumRate())\n",
    "#*# print(ctmdp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f18987b",
   "metadata": {},
   "source": [
    "### Solve the MDP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dad852d-499a-46bd-a64d-2958c6d8709b",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimum=ctmdp.ValueIteration(0.01,75)\n",
    "print(optimum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb1465bb",
   "metadata": {},
   "source": [
    "## Structural Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2446b067",
   "metadata": {},
   "source": [
    "The structural analysis is mainly related to the policy handling. In what follow we :\n",
    "\n",
    "1. Check property of the MDP by building a Markov Chain Associated with a policy\n",
    "2. Check property of the value function "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d684922b",
   "metadata": {},
   "source": [
    "### Check property using Markov Chain analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4bda8aa",
   "metadata": {},
   "source": [
    "#### Check if the MDP is \"multichain\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f386b77c",
   "metadata": {},
   "source": [
    "Actually the multichain property is useless for discounted criteria and is solely valid for average multichain criteria. This is presented here for an example purpose. \n",
    "\n",
    "To assess the property, we build a special policy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfad3d83",
   "metadata": {},
   "outputs": [],
   "source": [
    "policy=md.FeedbackSolutionMDP(states.Cardinal())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "977107ab",
   "metadata": {},
   "source": [
    "Now we fill-in policy. The policy is defined as foolows: in any states such that the number of customer is less than 2 the server si activated and deactivated otherwise. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9294f2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "etat=states.StateBuffer()\n",
    "states.FirstState(etat)\n",
    "for k in range(states.Cardinal()):\n",
    "    if(etat[0]==(model['B1']-1) or etat[2]==(model['B2']-1) ):\n",
    "        policy.setActionIndex(k,0)\n",
    "    else :\n",
    "        policy.setActionIndex(k,1)\n",
    "    states.NextState(etat)\n",
    "print(policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8870e7aa",
   "metadata": {},
   "source": [
    "**Build a Markov Chain from a policy**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71757496",
   "metadata": {},
   "outputs": [],
   "source": [
    "Mat=ctmdp.GetChain(optimum)\n",
    "Mat.set_type(mco.DISCRETE)\n",
    "#*# print(Mat)\n",
    "\n",
    "initial = mco.UniformDiscreteDistribution(0,states.Cardinal()-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4231536",
   "metadata": {},
   "source": [
    "Making the chain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "777d63e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "chaine = mch.MarkovChain( Mat )\n",
    "chaine.set_init_distribution(initial)\n",
    "chaine.set_model_name( \"Chain issued from the MDP\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "039d1006",
   "metadata": {},
   "source": [
    "**Analysis of the transition matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ec38c18",
   "metadata": {},
   "outputs": [],
   "source": [
    "Mat.FullDiagnose()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "040a429d",
   "metadata": {},
   "source": [
    "**Evaluate the policy**\n",
    "\n",
    "Now we can evaluate the policy by the way of the `PolicyCost` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9b10156",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctmdp.PolicyCost(policy,0.01,75)\n",
    "print(policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e54e4860",
   "metadata": {},
   "source": [
    "### Check if the value function has structural property (convex,monotone)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8dda597",
   "metadata": {},
   "source": [
    "This is done by building a specific object `PropertiesValue`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1ac0d67",
   "metadata": {},
   "outputs": [],
   "source": [
    "checkValue =  md.PropertiesValue(states)\n",
    "checkValue.avoidDetail()\n",
    "monotonicity=checkValue.Monotonicity(optimum)\n",
    "print(\"Printing monotonicity property of value function (1 if increasing -1 if decreasing 0 otherwise) : \"\\\n",
    "      + str(monotonicity) )\n",
    "\n",
    "print(\"Checking convexity\")\n",
    "convexity=checkValue.Convexity(optimum)\n",
    "print(\"Printing convexity property of value function (1 if convex -1 concave 0 otherwise) : \" + \\\n",
    "      str(convexity))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f4e812b",
   "metadata": {},
   "source": [
    "The analysis can be made dimension by dimension. Now we check the monotonicty of the first dimension by letting vary the entries with index 0 and keeping the other dimensions fixed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5b33527",
   "metadata": {},
   "outputs": [],
   "source": [
    "monotonicity=checkValue.MonotonicityByDim(optimum,0)\n",
    "print(\"Following dimension 0 monotonicity is\",str(monotonicity))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3c8d0c7",
   "metadata": {},
   "source": [
    "### Check if the optimal policy has structural property"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "708ad103",
   "metadata": {},
   "source": [
    "The structural analysis of a policy property is carried out using a `PropertiesValue` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fe7f261",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Checking Structural Properties of value\")\n",
    "checkPolicy =  md.PropertiesPolicy(states)\n",
    "\n",
    "monotonicity=checkPolicy.Monotonicity(optimum)\n",
    "print(\"PropertiesPolicy::MonotonicityOptimalPolicy=\"+str(monotonicity))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "331d64f8",
   "metadata": {},
   "source": [
    "End"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "marmote-use",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
